connection pool
이전에는 데이터베이스 커넥션을 획들할 때는 과정이 매우 복잡했다.
1. 애플리케이션 로직은 DB 드라이버를 통해 커넥션을 조회한다.
2. DB 드라이버는 DB 와 TCP/IP 커넥션을 연결한다. 물론 이 과정에서 3 way handshake 같은 TCP/IP 연결을 위한 네트워크 동작이 발생한다.
3. DB 드라이버는 TCP/IP 커넥션이 연결되면 ID, PW 와 기타 부가정보를 DB 에 전달한다.
4. DB 는 ID,PW 를 통해 내부 인증을 완료하고, 내부에 DB 세션을 생성한다.
5. DB 는 커넥션 생성이 완료되었다는 응답을 보낸다.
6. DB 드라이버는 커넥션 객체를 생성해서 클라이언트에 반환한다.

이렇게 커넥션을 새로 만드는 것은 복잡하고 시간도 많이 소모되는 일이다.
DB 는 물론이고 어플 서버에서도 TCP/IP  커넥션을 새로 생성하기 위한 리소스를 매번 사용해야 한다.
진짜 문제는 고객이 어플을 사용할 때, SQL 을 실행하는 시간 뿐만 아니라 커넥션을 새로 만드는 시간이 추가되기 떄문에
결과적으로 응답 속도가 영향을 준다. 이것은 사용자에게 좋지 않은 경험을 줄 수 있다.

이런 문제를 한번에 해결하는 아이디어가 바로 커넥션을 미리 생성해두고 사용하는 '커넥션 풀' 이라는 방법이다.
커넥션 풀은 이름 그대로 커넥션을 관리하는 풀 (수영장 풀을 상상하면 된다) 이다.

어플을 시작하는 시점에 커넥션 풀은 필요한 만큼 커넥션을 미리 확보해서 풀에 보관한다. 보통 얼마나 보관할 지는 서비스의 특징과 서버
스펙에 따라 다르지만 기본값은 보통 10개이다.
즉시 SQL 을 DB 에 전달할 수 있다.

대표적인 커넥션 풀 오픈소스는 HikariCP 를 주고 사용한다. 스프링 부트 2.0 부터는 기본 커넥션 풀로 HikariCP 를 제공한다.
성능, 사용의 편리함, 안전성 측면에서 이미 검증이 되었기 때문에 커넥션 풀을 사용할 때는 고민할 것 없이 HikariCP 를 사용하면 된다.
실무에서도 레거시 프로젝트가 아닌 이상 대부분 HikariCP 를 사용한다.

그래서 애플리케이션 로직에서 커넥션을 획득하는 다양한 방법이 있다.
1. DriverManager 으로 통해 신규 커넥션을 매번 생성하는 방법
2. DBCP2 커넥션 풀 에서 이미 생성된 연결을 하나 사용하는 방법
3. HikariCP 커넥션 풀에서 땡겨오냐
주의. DriverManager 를 사용해서 커넥션을 획득하다 HikariCP 같은 커넥션 풀을 사용하면 애플리케이션 코드도 함께 변경되어야 한다.
의존관계가 DriverManager 에서 HikariCP 로 변경되기 때문이다.

대부분의 커넥션 풀은 Datasource 인터페이스를 이미 구현해두었다. 따라서 개발자는 DBCP2, HikariCP 의 코드를 직접 의존하는 것이 아닌
datasource 인터페이스에만 의존하도록 어플 로직을 작성하면 된다.
커넥션 풀 구현 기술을 변경하고 싶으면 해당 구현체로 갈아끼우기만 하면 된다.
DriverManager 는 DataSource 인터페이스를 사용하지 않는다. 따라서 DriverManager 는 직접 사용해야 한다.
DriverManager 를 사용하다가 DataSource 기반의 커넥션 풀을 사용하도록 변경하면 관련 코드를 다 고쳐야 한다. 이런 문제를
해결하기 위해 스프링은 DriverManager 도 DataSource 를 통해서 사용할 수 있도록 DriverManagerDataSource 라는
DataSource 를 구현한 클래스를 제공한다.

DataSource 와 DriverManager 큰 차이가 있다.
DriverManager 같은 경우, Connection 할 때 마다 DB의 URL,USERNAME,PASSWORD 를 매번 등록해야 하며 매번 처음부터 다시 연결한다.
반면 DataSource 같은 경우, 한번의 커넥션으로 매번 URL,USERNAME,PASSWORD 를 입력하지 않는다.